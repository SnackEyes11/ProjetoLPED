#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include <ctype.h>
#include <time.h>

struct tm *periodo; //Struct composta para hora, minuto, segundo, dia mes e ano 
                    //em determinadas etapas do programa
                    
typedef struct {                   //Struct para guardar hora, minuto, segundo, dia mes e ano 
	    int dia, mes, ano;         //em determinadas etapas do programa    
	    int hora, minuto, segundo;    
}Local;
    

typedef struct {    //Struct principal, com a função de guardar os dados dos rotistas
	char numConta[5];
	char nome[10];
	char sobrenome[10];
	char cpf[14];
	float saldo;
    Local local;    //varivel do tipo struct Local
} Rotista;

/*typedef struct {
    char numRua[10];
    char nomeRua[100]
    char casa[10];
    
};*/

int menu();            //Contém as opções de entrada para o usuário
void opcao();           //retorna a opcao(escolha) do usuário em função ao menu
void listaRotistas();   //Lista todos os rotista na ativa
void procuraRotista();  //Procura um rotista cadastrado
void cadastroRotista(); //Cadastra um rotista ao programa
void alteraRotista();   //Altera um rotista cadastro 
void deletaRotista();   //Deleta um rotista que foi cadastrado
void sair();

//Verificações de entrada de dados
int verificaCPF(char[]);    //Verifica CPF no cadastro ou alteração de um rotista
int verificaNumConta(char[]);   //Verifica Numero da conta no cadastro de um rotista

//Verificação de existência de dados
int cpfCadastrado(char[], char[], int);  //Verifica o CPF do rotista já foi cadastrado   
int numContaCadastro(char[]);   //Verifica se um numero de conta do rotista já foi Cadastrado

//Entrda de dados dos usuários
void lerNumConta(Rotista *);
void lerNome(Rotista *);
void lerSobrenome(Rotista *);
void lerCPF(Rotista *, char[], int);
void lerSaldo(Rotista *);
void declaraTempo(Rotista *);
void declaraData(Rotista *);

//Digita na tela informações de um rotista
int escreveRotista(Rotista *, char []);

void main() {   //Função principal
	setlocale(LC_ALL, "Portuguese"); //Aceita acentos
	opcao();//Chama o controlador do menu
}

int menu() { // MONTA O MENU E RETORNA A OPÇÃO ESCOLHIDA

	system("cls");
	printf("\t\tMENU\n");
	printf("(0) - Sair\n");
	printf("(1) - Cadastro\n");
	printf("(2) - Listar\n");
	printf("(3) - Procurar\n");
	printf("(4) - Alterar\n");
	printf("(5) - Deletar\n");
	
	int escolha;
	scanf("%d",&escolha);
	
	return escolha; // retorna a opção escolhida
}

void opcao() {
	//Verifica a opção escolhida e manda para a função necessária
	system("cls");
	void (*retorno[6])(void)={sair,cadastroRotista,listaRotistas,procuraRotista,alteraRotista,deletaRotista};
    int escolha = menu();

    if(escolha <= 5 && escolha >= 0){
        (*retorno[escolha])();
        opcao();
    }    
    opcao();
}

void cadastroRotista() {
	Rotista *rotista = (Rotista *) malloc(sizeof(Rotista));
    system("cls");
    
    time_t t;
    t = time(NULL);
    periodo = localtime(&t);
    
    lerNumConta(rotista);
    lerNome(rotista);
    lerSobrenome(rotista);
    lerCPF(rotista, rotista->numConta, 0);
    lerSaldo(rotista);
    declaraTempo(rotista);
    declaraData(rotista);

	FILE *ptr;
	ptr = fopen("rotista.c", "ab");

	if(ptr == NULL) {
		printf("Erro ao abrir arquivo!");
	} else {
		fwrite(rotista, sizeof(Rotista), 1, ptr); //Salva 1 registro de rotista no arquivo de forma binaria
		printf("Salvo!\n");
	}
	fclose(ptr);
	free(rotista);//Libera a memoria
	
	printf("\nPressione qualquer tecla para continuar...");
	getch();
}

void procuraRotista() { //Procura um rotista especifico
    system("cls");
    char numConta[11];
    int entrou = 0;
	Rotista *rotista = (Rotista *) malloc(sizeof(Rotista));
	
    printf("Digite o numero da conta: ");
    fflush(stdin);
	fgets(numConta,11,stdin);
	fflush(stdin);
    
    system("cls");
	entrou = escreveRotista(rotista, numConta);
	
	if(entrou == 0)
	    printf("Erro ao achar Numero de Conta\n\n");
    
	
	printf("Pressione qualquer tecla para continuar...");
    free(rotista);
    
	getch();
}

void listaRotistas() { //lista todos os rotistas cadastros
	FILE *ptr;
	system("cls");//LIMPA A TELA
	//Abre o arquivo em modo de leitura binária.
	ptr = fopen("rotista.c", "rb");
	Rotista *rotista = (Rotista *) malloc(sizeof(Rotista)); // Cria um rotista

	if(ptr == NULL) {
		printf("Erro ao abrir arquivo!");
	} else {
		rewind(ptr); //Ler o arquivo desde o começo
		while(fread(rotista, sizeof(Rotista), 1, ptr) == 1) { //LER um rotista por cada vez e imprimi as informaçoes
			printf("%-15s %s", "Identificação:", rotista->numConta);
			printf("%-15s%s %s\n", "Nome:", rotista->nome, rotista->sobrenome);
			printf("%-15s%s", "CPF:", rotista->cpf);
			printf("%-15s%.2f\n\n", "Saldo:", rotista->saldo);
			printf("%s","Periodo do cadastro:\n");
			printf("%d/%d/%d\n", rotista->local.dia, rotista->local.mes, rotista->local.ano);
			printf("%d:%d:%d\n\n", rotista->local.hora, rotista->local.minuto, rotista->local.segundo);
		}
	}

	fclose(ptr);
	free(rotista);
	printf("Pressione qualquer tecla para continuar...");

	getch(); //Espera o usuário clicar uma botão
}

void alteraRotista(){
    setlocale(LC_ALL,"Portuguese");
    Rotista *rotista = (Rotista *) malloc(sizeof(Rotista));
	int entrou = 0;
    char numConta[11];
    
	system("cls");
	printf("Digite o numero da conta: ");
	fflush(stdin);
	fgets(numConta, 11, stdin);
	fflush(stdin);
    
    system("cls");
    entrou = escreveRotista(rotista, numConta);
	
	if(entrou == 1) { // Se o rotista foi encontrado
        time_t t;
        t = time(NULL); 
        periodo = localtime(&t);
        
        printf("\t\tALTERALÇÕES:\n");
        lerNome(rotista);
        lerSobrenome(rotista);
        lerCPF(rotista, numConta, 1);
        lerSaldo(rotista);
        declaraTempo(rotista);
        declaraData(rotista);

        FILE *ptr;
		FILE *ptrAux;
		ptr = fopen("rotista.c", "rb");
		ptrAux = fopen("rotistaAux.c", "ab");

		//Temos dois arquivos abertos
		//O original e o que auxiliar que terá os novos dados
		Rotista *rotistaAux = (Rotista *) malloc(sizeof(Rotista));
		
		//rotista = possui o rotista alterado
		//rotistaAux são os rotistas já salvo no arquivo

		if(ptr == NULL || ptrAux == NULL) {
			printf("Erro ao abrir arquivo!");
		} else {
			rewind(ptr);
			while(fread(rotistaAux, sizeof(Rotista), 1, ptr) == 1) {
				if(strcmp(rotista->numConta,numConta) == 0) { //Se for o rotista alterado, salve o novo rotista
					fwrite(rotista, sizeof(Rotista), 1, ptrAux);
				} else {
					//SE NÃO, salve o rotista normal
					fwrite(rotistaAux, sizeof(Rotista), 1, ptrAux);
				}
			}
		}
		fclose(ptr);
		fclose(ptrAux);
		free(rotista);
		free(rotistaAux);
		
		remove("rotista.c"); //Remove o arquivo original
		rename("rotistaAux.c", "rotista.c"); //Renomeia o arquivo auxiliar com os novos dados
	}

	printf("Pressione qualquer tecla para continuar...");
	getch();
}

void deletaRotista() {
    Rotista *rotista = (Rotista *) malloc(sizeof(Rotista));
	int entrou = 0;
	char numConta[5];
    
    system("cls");
    printf("Digite o numero da conta: ");
	fflush(stdin);
    fgets(numConta,11,stdin);
    fflush(stdin);
    
    system("cls");    
    entrou = escreveRotista(rotista, numConta);
	
	if(entrou == 1) {
		FILE *ptrAux;
		FILE *ptr;
		ptr = fopen("rotista.c", "rb");
		ptrAux = fopen("rotistaAux.c", "ab");
		Rotista *rotista = (Rotista *) malloc(sizeof(Rotista));
        Rotista *rotistaAux = (Rotista *) malloc(sizeof(Rotista));
        
		if(ptr == NULL || ptrAux == NULL) {
			printf("Erro ao abrir arquivo!");
		} else {
			rewind(ptr);
			rewind(ptrAux);
			while(fread(rotista, sizeof(Rotista), 1, ptr) == 1) {
				if(strcmp(rotista->numConta,numConta) == 0){	//Se for o rotista deletado,não fazer nada
				    //DELETADO
				} else {
					//salvar os outros rotistas
					fwrite(rotistaAux, sizeof(Rotista), 1, ptrAux);
				}
			}
		}
		fclose(ptr);
		fclose(ptrAux);
		
		free(rotista);
		free(rotistaAux);
		rotista = NULL;
		rotistaAux = NULL;

		remove("rotista.c");
		rename("rotistaAux.c", "rotista.c");
	}
	printf("Pressione qualquer tecla para continuar...");

	getchar();
}

void sair(){
    exit(1);
}

// Verificações da validação do cpf
int cpfCadastrado(char cpf[], char numConta[], int check){
    FILE *ptrAux;
    
    ptrAux = fopen("rotista.c","rb");
    Rotista *rotistaAux = (Rotista *) malloc(sizeof(Rotista));
       
    if(ptrAux == NULL){
          
    }else{
        rewind(ptrAux);
        while(fread(rotistaAux,sizeof(Rotista), 1, ptrAux) == 1){
            if(check == 0){
                if(strcmp(rotistaAux->cpf,cpf) == 0){
                    printf("Entre com um CPF ainda não cadastrado: ");
                    fclose(ptrAux);
                    free(rotistaAux);
                    return 0;
                }
            }else
                if(check == 1){
                    if(strcmp(rotistaAux->cpf,cpf) == 0 && strcmp(rotistaAux->numConta,numConta) != 0){
                        printf("Entre com um CPF ainda não cadastrado: ");
                        fclose(ptrAux);
                        free(rotistaAux);
                        return 0;
                    }
                }
        }   
        if(verificaCPF(cpf) == 0){
            printf("Entre com um CPF válido: ");
            fclose(ptrAux);
            free(rotistaAux);
            return 0;
        }else{
            fclose(ptrAux);
            free(rotistaAux);
            return 1;
        }
    }
}

int verificaCPF(char cpf[]) {
	char aux[1]; //String de 1 porque atoi nao converte caracter unico
    int a,b;
    int soma=0;
     
    if (strlen(cpf) - 1 != 11) //verifica se o valor inserido tem 11 caracteres
        return 0;

    for (a=0;a<11;a++){
        if (!isdigit(cpf[a])) //verifica se todos os caracteres inseridos são um digito
            return 0;
    }

    for (a = 0,b = 10;a < 9;a++,b--){
        aux[0] = cpf[a];
        soma += b * atoi(aux);  
    }
    aux[0] = cpf[9];  
    if(soma % 11 >= 2 ){
        if(atoi(aux) != 11 - (soma % 11)){
            return 0;
        }   
    }else{
        if(atoi(aux) != 0){
            return 0;
        }
    }

    soma = 0;
    for(a = 0,b = 11;a < 10;a++,b--){
        aux[0] = cpf[a];
        soma += b * atoi(aux);
    }
    
    aux[0] = cpf[10];
    if(soma % 11 >= 2){
        if(atoi(aux) != 11 - (soma % 11))
            return 0;
    }else{
        if(atoi(aux) != 0)
            return 0;
    }
    
    return 1;
}
/////////////////////////////////////////////////////////
//  Verificações da validação do NumConta //
int numContaCadastrado(char dado[]){
    setlocale(LC_ALL,"Portuguese");
    FILE *ptr;
    
    ptr = fopen("rotista.c","rb");
    Rotista *rotista = (Rotista *) malloc(sizeof(Rotista));
       
    if(ptr == NULL){
       
    }else{
        rewind(ptr);
        while(fread(rotista,sizeof(Rotista), 1, ptr) == 1){
            if(strcmp(rotista->numConta,dado) == 0){
                printf("Entre com um numero de conta não cadastrado: ");
                fclose(ptr);
                free(rotista);
                return 0;       
            }
        }
        if(verificaNumConta(dado) == 0){
            printf("Entre com um numero de conta válido: ");
            fclose(ptr);
            free(rotista);
            return 0;
        }
    }
    fclose(ptr);
    free(rotista);
    return 1;
}

int verificaNumConta(char numConta[]){
    int i;
        
    if(strlen(numConta) - 1 != 3)
        return 0;
    
    for(i = 0;i < strlen(numConta) - 1;i++){
        if(!isdigit(numConta[i]))
            return 0;
    }
    
    return 1;
}
////////////////////////////////////////////////////////////////////
void lerNumConta(Rotista *rotista){
    //Entra com o numero da conta
	printf("Digite o numero de sua conta: ");
	inicio:
        fflush(stdin);
	    fgets(rotista->numConta,11,stdin);
	    fflush(stdin);
	    if(numContaCadastrado(rotista->numConta) == 0)  
                    goto inicio;
}

void lerNome(Rotista *rotista){
    //Entrada do Nome do Usuário
    printf("Digite seu nome: ");
	fflush(stdin);
    gets(rotista->nome);
    fflush(stdin);
}

void lerSobrenome(Rotista *rotista){
    //Entrada do Sobrenome do Usuário
	printf("Digite seu sobrenome: ");
	fflush(stdin);
	gets(rotista->sobrenome);
	fflush(stdin);
}

void lerCPF(Rotista *rotista, char numConta[], int check){
    //Entrada do CPF do usuário
	printf("Digite seu CPF: ");
    inicio:
        fflush(stdin);
        fgets(rotista->cpf,14,stdin);               
        fflush(stdin);
        if(cpfCadastrado(rotista->cpf, numConta, check) == 0)
            goto inicio; 
        
}

void lerSaldo(Rotista *rotista){
    //Entrada do saldo do rotista
	printf("Entre com seu saldo: ");
	fflush(stdin);
	scanf("%f", &rotista->saldo);
	fflush(stdin);
}

void declaraTempo(Rotista *rotista){
    //Salvando o dia em que o cadastro do rotista foi Rotista foi criado
	rotista->local.dia  = periodo->tm_mday;
    rotista->local.mes = periodo->tm_mon + 1;
    rotista->local.ano = periodo->tm_year + 1900;
}

void declaraData(Rotista *rotista){
    //Salvando a hora em que o cadastro do rotista foi criado
    rotista->local.segundo = periodo->tm_sec;
    rotista->local.minuto = periodo->tm_min;
    rotista->local.hora = periodo->tm_hour;
}
////////////////////////////////////////////////////////////////////////
int escreveRotista(Rotista *rotista, char numeroConta[]){
    FILE *ptr = fopen("rotista.c","rb");
    
    if(ptr == NULL){
        printf("Erro ao abrir o arquivo!");
    }else{
        rewind(ptr);
        while(fread(rotista,sizeof(Rotista), 1, ptr)){
            if(strcmp(rotista->numConta,numeroConta) == 0){
				printf("%-15s %s", "Identificação:", rotista->numConta);
	            printf("%-15s%s %s\n", "Nome:", rotista->nome, rotista->sobrenome);
			    printf("%-15s%s", "CPF:", rotista->cpf);
			    printf("%-15s%.2f\n\n", "Saldo:", rotista->saldo);
			    printf("%s","Periodo do cadastro:\n");
			    printf("%d/%d/%d\n", rotista->local.dia, rotista->local.mes, rotista->local.ano);
			    printf("%d:%d:%d\n\n", rotista->local.hora, rotista->local.minuto, rotista->local.segundo);
				fclose(ptr);
                return 1;
            }
        }
    }
    fclose(ptr);
    return 0;
}
